AWS & DevOps Training
Assignment
Overview:
1.	Create an EC2 instance from aws cli
2.	Create an S3 bucket from aws cli
3.	Create a Cloudwatch log group from aws cli
4.	What is ECR?
5.	List differences between AWS ECS fargate and ECS EC2
6.	What is HashMap algorithm
7.	What is Grafana?
8.	What is Kibana?














1.Create an EC2 instance from aws cli:
•	Before creating an ec2 instance use aws configure command and give access, secret key IDs, region and json format to connect the aws cli to cloud 
•	We can create an ec2 instance by using the following command from aws cli
aws ec2 run-instances --image-id ami- 07ebfd5b3428b6f4d --count 1 --instance-type t2.micro --key-name ciratraining –region us-east-1 --security-group-ids sg-0ace05ea46a0a8ebe --subnet-id subnet-0f579358a534dc64f
2.Create an S3 bucket from aws cli:
•	We can create s3 bucket using the following command from aws cli
aws s3api create-bucket --bucket phanis3 --region us-east-1
3.Create a Cloudwatch log group from aws cli:
•	To create Cloudwatch log group from aws cli we use this command 
aws logs create-log-group --region us-east-1 --log-group-name phanilogs
4.What is ECR?
Amazon Elastic Container Registry (Amazon ECR) is a managed AWS Docker registry service that is secure, scalable, and reliable. Amazon ECR supports private Docker repositories with resource-based permissions using AWS IAM so that specific users or Amazon EC2 instances can access repositories and images. Developers can use the Docker CLI to push, pull, and manage images.
Registry
An Amazon ECR registry is provided to each AWS account; you can create image repositories in your registry and store images in them. For more information, see Amazon ECR Registries.
Authorization token
Your Docker client must authenticate to Amazon ECR registries as an AWS user before it can push and pull images. For more information, see Registry Authentication.
Repository
An Amazon ECR image repository contains your Docker or Open Container Initiative (OCI) images. For more information, see Amazon ECR Repositories.
Repository policy
You can control access to your repositories and the images within them with repository policies. For more information, see Amazon ECR Repository Policies.
Image
You can push and pull container images to your repositories. You can use these images locally on your development system, or you can use them in Amazon ECS task definitions. For more information, see Using Amazon ECR Images with Amazon ECS.
5.List differences between AWS ECS fargate and ECS EC2
ECS container instance
An ECS container instance is nothing more than an EC2 instance that runs the ECS Container Agent. The EC2 instance is owned and managed by you. The instance appears in the list of EC2 instances like any other EC2 instance. The ECS Container Agent regularly polls the ECS API if new containers need to be started or stopped. Usually, you run a cluster of container instances in an auto-scaling group. ECS is free of charge. You only pay for the EC2 instances. The downside is that you have to scale, monitor, patch, and secure the EC2 instances yourself. Especially the scaling is not easy because
•	There is no obvious metric to scale the cluster and no integration to scale when the task placement fails because of insufficient capacity.
•	The auto-scaling group and ECS are not aware of each other which makes task deployments very hard during cluster scale in or rolling updates via CloudFormation.
•	You have to scale down without killing running tasks which is an even more significant challenge for long lived tasks.
Fargate
AWS Fargate manages the task execution. No EC2 instances to manage anymore. You pay for running tasks. That’s it. As easy as it sounds.
Each task that runs in Fargate comes with a dedicated Elastic Network Interface (ENI) with a private IP address. All containers of the same task can communicate with each other via localhost. Inbound and outbound task communication goes through the ENI. A public IP address can be enabled as well.






6.What is HashMap algorithm
•	It works based on the hashing principle, but it is not as simple as it sounds. Hashing is the mechanism of assigning unique code to a variable or attribute using an algorithm to enable easy retrieval. A true hashing mechanism should always return the same hashCode() when it is applied to the same object.
•	Then it applies the hashcode to the key .hashCode() by calling the hashcode method. In order to get the value within the limits of an array, the hash(key.hashCode()) is called, which performs some shifting operations on the hashcode.

The indexFor() method is used to get the exact location to store the Entry object.

•	Then comes the most important part — if two different objects have the same hashcode (e.g. Aa and BB will have the same hashcode), will it be stored in the same bucket? To handle this, let's think of the LinkedList in the data structure. It will have a "next" attribute, which will always point to the next object, the same way the next attribute in the Entry class points to the next object. Using this different objects with the same hashcode will be placed next to each other.

7.What is Grafana?
•	Grafana is an open source solution for running data analytics, pulling up metrics that make sense of the massive amount of data & to monitor our apps with the help of cool customizable dashboards.

•	Grafana connects with every possible data source, commonly referred to as databases such as Graphite, Prometheus, Influx DB, ElasticSearch, MySQL, PostgreSQL etc.

•	Grafana being an open source solution also enables us to write plugins from scratch for integration with several different data sources.

•	The tool helps us study, analyse & monitor data over a period of time, technically called time series analytics.

•	It helps us track the user behaviour, application behaviour, frequency of errors popping up in production or a pre-prod environment, type of errors popping up & the contextual scenarios by providing relative data.

•	A big upside of the project is it can be deployed on-prem by organizations which do not want their data to be streamed over to a vendor cloud for security & other reasons.


8.What is Kibana?
•	Kibana is an open source frontend application that sits on top of the Elastic Stack, providing search and data visualization capabilities for data indexed in Elasticsearch. Commonly known as the charting tool for the Elastic Stack (previously referred to as the ELK Stack after Elasticsearch, Logstash, and Kibana), Kibana also acts as the user interface for monitoring, managing, and securing an Elastic Stack cluster — as well as the centralized hub for built-in solutions developed on the Elastic Stack.
•	Kibana's tight integration with Elasticsearch and the larger Elastic Stack make it ideal for supporting the following:

•	Searching, viewing, and visualizing data indexed in Elasticsearch and analyzing the data through the creation of bar charts, pie charts, tables, histograms, and maps. A dashboard view combines these visual elements to then be shared via browser to provide real-time analytical views into large data volumes in support of use cases such as:
1.	Logging and log analytics
2.	Infrastructure metrics and container monitoring
3.	Application performance monitoring (APM)
4.	Geospatial data analysis and visualization
5.	Security analytics
6.	Business analytics
7.	Monitoring, managing, and securing an Elastic Stack instance via web interface.
•	Centralizing access for built-in solutions developed on the Elastic Stack for observability, security, and enterprise search applications.
